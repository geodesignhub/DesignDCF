<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Design Discounted Cash Flow Calculator</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Description" lang="en" content="Geodesign Hub Evaluation Maps Builder">
    <meta name="author" content="Hrishikesh Ballal">
    <meta name="robots" content="index, follow">
    <!-- icons -->
    <link rel="shortcut icon" href="/assets/loaders/favicon.ico">
    <!-- Bootstrap Core CSS file -->
    <link rel="stylesheet" href="assets/css/bootstrap.min.css">
    <!-- Override CSS file - add your own CSS rules -->
    <link rel="stylesheet" href="assets/css/styles.css">
    <link rel="stylesheet" href="assets/css/ion.rangeSlider.css">
    <link rel="stylesheet" href="assets/css/ion.rangeSlider.skinFlat.css">
    <link rel="stylesheet" type="text/css" href="assets/css/flatty.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/leaflet.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/ion.rangeSlider.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/ion.rangeSlider.skinFlat.css" />
    <link rel="stylesheet" type="text/css" href="assets/css/jquery.dataTables.min.css" />
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <!-- Conditional comment containing JS files for IE6 - 8 -->
    <!--[if lt IE 9]>
            <script src="assets/js/html5.js"></script>
            <script src="assets/js/respond.min.js"></script>
        <![endif]-->
</head>

<body>
    <!-- Navigation -->
    <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Design Discounted Cash Flow Analysis</a>
            </div>
            <!-- /.navbar-header -->
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <!-- /.navbar -->
    <!-- Page Content -->
    <div class="container-fluid">
        <!-- /.row -->
        <br>
        <!-- Heading Row -->

        <div class="row">
            <div class="col-md-6">
                <h3 id="designName">Discounted Cash Flow Analysis</h3>
                <p class="description">This plugin downloads a design from Geodesign Hub, computes its area and construction costs and provides a <a href="https://en.wikipedia.org/wiki/Discounted_cash_flow" target="_blank">Discounted Cash Flow</a> analysis to calculate Net
                    Present Value of this design. Choose the WACC and click on Compute Net Present Value, then you can copy paste it in Excel.</p><br><br>
            </div>

            <div class="col-md-6 text-right">
                <!--<h3>Design Synthesis</h3>
                <div id="inputmap"></div>-->
                <h5>Weighted Annual Cost of Capital (WACC)</h5>
                <p class='ionslider'><input type="text" id="wacc-slider" name="wacc" value="" /></p>
                <br><br><br><br>
                <p><button id="computeNPVButton" type="button" class="btn btn-info"><i class="glyphicon glyphicon-certificate"></i> Compute Net Present Value</button>&nbsp;&nbsp;<span id="loadingGIF"><img src="/assets/loaders/loading.gif">&nbsp;<span id="procstatus">Processing</span>...</span>
                </p>
                <br>
            </div>
        </div>
        <br>
        <br>
        <div class="row">
            <div class="col-md-6">
            </div>
            <div class="col-md-6 text-right">

                <div id='yearlyortotal' class="btn-group" data-toggle="buttons">
                    <label class="btn btn-default active">
                    <input type="radio" id='totalmap' name="mapdisplay" value="total" checked="">Total
                </label>
                    <label class="btn btn-default">
                    <input type="radio" id= 'yearlymap' name="mapdisplay" value="yearly" >Yearly
                </label>
                </div>
            </div>

        </div>

        <br>
        <div class="row">
            <div class="col-md-4">
                <h4>Investments Map</h4>
                <div id="investmentMap" class="map"></div>
            </div>
            <div class="col-md-4">
                <h4>Income Map</h4>
                <div id="incomeMap" class="map"></div>
            </div>
            <div class="col-md-4">
                <h4>Maintainence Map</h4>
                <div id="maintainenceMap" class="map"></div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">

            </div>
            <div class="col-md-6">
                <div id="yearlySliderCont" style="display:none"><br>
                    <p class='ionslider'><input type="text" id="yearly-slider" name="mapslider" value="" /></p>
                </div>
            </div>
        </div>
        <br>
        <hr>
        <br>
        <div class="row">
            <div class="col-md-6">
                <h3>Financial Statement</h3>
                <br>
                <br>
            </div>

            <div class="col-md-6 text-right">
                <div class="btn-group" data-toggle="buttons">
                    <label class="btn btn-default active">
                        <input type="radio" name="pprintdisplay" value="pprint" checked="">Pretty Print
                    </label>
                    <label class="btn btn-default">
                        <input type="radio" name="pprintdisplay" value="raw">Raw
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div id="systemsCBCont" style="display:none">
                    <h4>Systems</h4>
                    <div id="systemsCB"></div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <br>
                <h4>Investments</h4>
                <table id="investments" class="hor-minimalist-b">
                    <thead>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </thead>
                    <tbody>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </tbody>
                </table>
                <br>
                <h4>Maintainence</h4>

                <table id="maintainence" class="hor-minimalist-b">
                    <thead>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </thead>
                    <tbody>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </tbody>
                </table>
                <br>
                <p class='pull-right'><small>* Maintainence assumes 3% of investment annually. </small></p>
                <br>
                <h4>Income</h4>

                <table id="income" class="hor-minimalist-b">
                    <thead>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </thead>
                    <tbody>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </tbody>
                </table>
                <br>
                <p class='pull-right'><small>* Income assumes earnings of 10% of investment every year growing at a rate of 3%. </small></p>

            </div>
        </div>
        <!-- /.col-md-4 -->

        <div class="row">

            <div class="col-md-12">
                <h4>Discounted Cash Flow and Net Present Value</h4>
                <table id="npv" class="hor-minimalist-b">
                    <thead>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </thead>
                    <tbody>
                        <tr class='blank'>&nbsp;&nbsp;</tr>
                    </tbody>
                </table>
            </div>

        </div>
        <!-- /.row -->
        <br>

        <!-- <div class="row">
            <div class="col-md-6">
            </div>
            <div class="col-md-6">
                <p class="pull-right"> Currency: <select id="workingcurrency">
                <option value="USD">US dollar</option>
                <option value="EUR" selected>European Euro</option>
                <option value="JPY">Japanese yen</option>
                <option value="GBP">Pound sterling</option>
                <option value="AUD">Australian dollar</option>
                <option value="CAD">Canadian dollar</option>
                <option value="CHF">Swiss franc</option>
                <option value="CNY">Chinese Yuan Renminbi</option>
                <option value="SEK">Swedish krona</option>
                <option value="MXN">Mexican peso</option>
                <option value="NZD">New Zealand dollar</option>
                <option value="SGD">Singapore dollar</option>
                <option value="HKD">Hong Kong dollar</option>
                <option value="NOK">Norwegian krone</option>
                <option value="KRW">South Korean won</option>
                <option value="TRY">Turkish lira</option>
                <option value="INR">Indian rupee</option>
                <option value="RUB">Russian ruble</option>
                <option value="BRL">Brazilian real</option>
                <option value="ZAR">South African rand</option>
                <option value="DKK">Danish krone</option>
                <option value="PLN">Polish zloty</option>
                <option value="TWD">New Taiwan dollar</option>
                <option value="THB">Thai baht</option>
                <option value="MYR">Malaysian ringgit</option>
                </select></p>
            </div>
        </div> -->
        <br><br>

        <hr>
        <!-- Footer -->
        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>&copy; 2017 <a href="https://www.geodesignhub.com/">Geodesign Hub</a>, see the <a href="https://github.com/geodesignhub/DesignDCF/">GitHub repository</a> for more information.</p>
                </div>
            </div>
        </footer>
        <div id="drawing"></div>
    </div>
    <!-- /.container-fluid -->
    <!-- JQuery scripts -->
    <script type="text/javascript" src="assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="assets/js/humane.min.js"></script>
    <script type="text/javascript" src="assets/js/svg.min.js"></script>
    <script type="text/javascript" src="assets/js/chartjs.min.js"></script>

    <!-- Bootstrap Core scripts -->
    <script type="text/javascript" src="assets/js/ion.rangeSlider.min.js"></script>
    <script type="text/javascript" src="assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/colors.js"></script>
    <script type="text/javascript" src="assets/js/leaflet.js"></script>
    <script type="text/javascript" src="assets/js/choropleth.js"></script>
    <script type="text/javascript" src="assets/js/money.min.js"></script>
    <script type="text/javascript" src="assets/js/moment.min.js"></script>


    <script type="text/javascript">
        var ctx = $("#chart");
        var svgDrawing = SVG('drawing').size(10, 10);
        fx.base = "USD";
        var incomeGrid;
        var standardizationVar;
        var maintainenceGrid;
        var investmentGrid;
        var grid; var sysGrids;
        var diagGrids;

        var numYears = 17; // number of colums; 
        function miniMapstyleComp(feature) {
            // console.log(feature.properties)
            var curFeature = feature.geometry.type;
            if (curFeature === 'LineString') {
                // console.log(feature)
                return {
                    weight: 2,
                    opacity: .9,
                    color: feature.properties.color,
                    dashArray: '',

                };
            } else {
                // var fillColor = getColor(feature.properties.areatype);

                if (feature.properties.areatype == 'project') {
                    var fillColor = feature.properties.color;
                } else { // it is policy
                    var fillPattern = setSVGStyle(feature.properties.color);
                    var fillColor = fillPattern;
                }

                return {
                    // fillColor: feature.properties.color,
                    // fillColor:'#333333',
                    weight: 1,
                    stroke: true,
                    opacity: 0.9,
                    fillColor: fillColor,
                    color: feature.properties.color,
                    dashArray: '',
                    // opacity: 0.2,
                    fillOpacity: 0.8,
                };
            }

        }

        function setSVGStyle(reqColor) {
            var pattern = svgDrawing.pattern(6, 6, function(add) {
                // add.rect(5, 5).fill(reqColor)
                add.line(0, 0, 6, 6).stroke({
                    width: 1,
                    color: reqColor
                })
                add.line(6, 0, 0, 6).stroke({
                    width: 1,
                    color: reqColor
                })
            });
            return pattern.fill();
        }

        function getColor(type) {

            return type === 'policy' ? '#707070 ' :
                type === 'project' ? '#a69695 ' :
                type === 'red2' ? '#bd0026' :
                type === 'red' ? '#f03b20' :
                type === 'yellow' ? '#FFFF00' :
                type === 'green' ? '#74c476' :
                type === 'green2' ? '#31a354' :
                type === 'green3' ? '#006d2c' :
                type === 'purple' ? '#CFACF7' :
                type === 'purple2' ? '#8D6CBF' :
                type === 'purple3' ? '#601286' :
                type === 'orange' ? '#FFA927' :
                type === 'orange2' ? '#F8872E' :
                type === 'orange3' ? '#FC6B0A' :
                type === 'constraints' ? '#343434' :
                type === 'boundaries' ? '#a6cee3' :
                type === 'boundaries2' ? '#b2df8a' :
                '#808080';
        }
        $("#loadingGIF").hide();
        var opGJ = {
            "type": "FeatureCollection",
            "features": []
        };
        var systems = <%- systems %>;
        var design = <%- design %>;
        var systemdetail = <%- systemdetail %>;
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>";
        var projectdetails = <%- projectdetails %>;
        var syndiagrams = <%- syndiagrams %>;
        var timeline = <%- timeline %>;
        var bounds = <%- bounds %>;
        var investmentdata;
        var overallgrid;
        var diaggrid;

        var startyear = moment(projectdetails['startdate']).year();

        // var inputmap = L.map('inputmap', {
        //     'zoomControl': false,
        //     'dragging': false,
        //     'touchZoom': false,
        //     'scrollWheelZoom': false,
        //     'doubleClickZoom': false
        // });
        // var inputbaseLayer = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
        //     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
        //     maxZoom: 18,
        // }).addTo(inputmap);
        // var inputLayer = L.featureGroup().addTo(inputmap);
        // var diagramLayer = L.geoJSON(design, {
        //     style: miniMapstyleComp
        // }).addTo(inputLayer);
        // inputmap.fitBounds(inputLayer.getBounds());


        function abbrNum(number, decPlaces) {
            if (number < 1000) {
                number = Math.round(number);
            } else {
                decPlaces = Math.pow(10, decPlaces);
                var abbrev = ["k", "m", "b", "t"];
                for (var i = abbrev.length - 1; i >= 0; i--) {
                    var size = Math.pow(10, (i + 1) * 3);
                    if (size <= number) {
                        number = Math.round(number * decPlaces / size) / decPlaces;
                        if ((number == 1000) && (i < abbrev.length - 1)) {
                            number = 1;
                            i++;
                        }
                        number += abbrev[i];
                        break;
                    }
                }
            }
            return number;
        }
        $('#computeNPVButton').on('click', function(e) {
            $("#loadingGIF").show();

            populateTableDataInit();
            // $("#loadingGIF").hide();
        });
        var selectedcurrency = $("#workingcurrency :selected").val() + " ";
        $("#workingcurrency").on('change', function() {
            selectedcurrency = this.value + " ";
            var costslider = $("#initcost-slider").data("ionRangeSlider");
            var acfslider = $("#acf-slider").data("ionRangeSlider");
            updateCostSliders(costslider, acfslider);
        });
        fx.rates = {
            "AED": 3.672779,
            "AFN": 66.800193,
            "ALL": 127.827212,
            "AMD": 487.109878,
            "ANG": 1.780989,
            "AOA": 165.9085,
            "ARS": 15.471,
            "AUD": 1.31536,
            "AWG": 1.799996,
            "AZN": 1.78,
            "BAM": 1.849552,
            "BBD": 2,
            "BDT": 80.125108,
            "BGN": 1.84748,
            "BHD": 0.377001,
            "BIF": 1692.851149,
            "BMD": 1,
            "BND": 1.411252,
            "BOB": 6.933767,
            "BRL": 3.1387,
            "BSD": 1,
            "BTC": 0.0007875411,
            "BTN": 66.682118,
            "BWP": 10.400479,
            "BYN": 1.904562,
            "BYR": 20026.25,
            "BZD": 2.011046,
            "CAD": 1.34073,
            "CDF": 1325.026325,
            "CHF": 1.012472,
            "CLF": 0.024808,
            "CLP": 661.7,
            "CNY": 6.902795,
            "COP": 2970.5,
            "CRC": 561.660798,
            "CUC": 1,
            "CUP": 24.728383,
            "CVE": 104.475,
            "CZK": 25.527933,
            "DJF": 178.87,
            "DKK": 7.022762,
            "DOP": 47.073187,
            "DZD": 110.074,
            "EEK": 14.765569,
            "EGP": 17.5163,
            "ERN": 15.335872,
            "ETB": 22.682675,
            "EUR": 0.944726,
            "FJD": 2.075152,
            "FKP": 0.819001,
            "GBP": 0.819001,
            "GEL": 2.45869,
            "GGP": 0.819001,
            "GHS": 4.807431,
            "GIP": 0.819001,
            "GMD": 44.54,
            "GNF": 9402.8,
            "GTQ": 7.377879,
            "GYD": 207.953501,
            "HKD": 7.76465,
            "HNL": 23.563454,
            "HRK": 6.99987,
            "HTG": 66.771148,
            "HUF": 292.46,
            "IDR": 13344.078017,
            "ILS": 3.671513,
            "IMP": 0.819001,
            "INR": 66.675,
            "IQD": 1176.886141,
            "IRR": 32422.252554,
            "ISK": 107.107248,
            "JEP": 0.819001,
            "JMD": 128.813276,
            "JOD": 0.709751,
            "JPY": 113.9115,
            "KES": 102.649915,
            "KGS": 69.230236,
            "KHR": 4055.341667,
            "KMF": 464.619811,
            "KPW": 900.09,
            "KRW": 1150.05,
            "KWD": 0.305954,
            "KYD": 0.833794,
            "KZT": 315.445334,
            "LAK": 8110.360256,
            "LBP": 1506.612443,
            "LKR": 151.287125,
            "LRD": 93.500553,
            "LSL": 13.010286,
            "LTL": 3.258379,
            "LVL": 0.663231,
            "LYD": 1.432033,
            "MAD": 10.093664,
            "MDL": 19.849225,
            "MGA": 3081.175758,
            "MKD": 58.135,
            "MMK": 1354.899087,
            "MNT": 2460.99351,
            "MOP": 8.001049,
            "MRO": 359.649314,
            "MTL": 0.683602,
            "MUR": 35.552654,
            "MVR": 15.600164,
            "MWK": 732.317781,
            "MXN": 19.5732,
            "MYR": 4.447015,
            "MZN": 70.200347,
            "NAD": 13.010286,
            "NGN": 305.779093,
            "NIO": 29.574421,
            "NOK": 8.48459,
            "NPR": 106.743708,
            "NZD": 1.432246,
            "OMR": 0.384997,
            "PAB": 1,
            "PEN": 3.285958,
            "PGK": 3.170636,
            "PHP": 50.324,
            "PKR": 104.844691,
            "PLN": 4.07335,
            "PYG": 5437.753363,
            "QAR": 3.64115,
            "RON": 4.283923,
            "RSD": 116.974741,
            "RUB": 58.179,
            "RWF": 839.609284,
            "SAR": 3.75045,
            "SBD": 7.774277,
            "SCR": 13.4635,
            "SDG": 6.426125,
            "SEK": 9.006643,
            "SGD": 1.410846,
            "SHP": 0.819001,
            "SLL": 7492.707416,
            "SOS": 578.886497,
            "SRD": 7.5435,
            "STD": 23150.420331,
            "SVC": 8.754864,
            "SYP": 214.356667,
            "SZL": 13.003388,
            "THB": 35.083,
            "TJS": 8.074369,
            "TMT": 3.50998,
            "TND": 2.290905,
            "TOP": 2.260797,
            "TRY": 3.6832,
            "TTD": 6.723645,
            "TWD": 30.91834,
            "TZS": 2229.760079,
            "UAH": 27.008813,
            "UGX": 3619.708069,
            "USD": 1,
            "UYU": 28.102777,
            "UZS": 3331.8,
            "VEF": 9.995002,
            "VND": 22782.246897,
            "VUV": 108.000583,
            "WST": 2.513649,
            "XAF": 619.997442,
            "XAG": 0.05647006,
            "XAU": 0.00081654,
            "XCD": 2.70255,
            "XDR": 0.741199,
            "XOF": 621.033198,
            "XPD": 0.00129314,
            "XPF": 112.941156,
            "XPT": 0.00102566,
            "YER": 249.658196,
            "ZAR": 12.962983,
            "ZMK": 5253.075255,
            "ZMW": 9.780188,
            "ZWL": 322.322775

        };

        function initpercentSliders() {
            $("#wacc-slider").ionRangeSlider({
                min: 0,
                max: 20,
                from: 1,
                step: 0.5,
                postfix: "%",
                grid: true,
                prettify_enabled: true
            });
            $("#yearly-slider").ionRangeSlider({
                min: startyear,
                max: startyear + 15,
                from: startyear,
                step: 1,
                grid: true,
                prettify_enabled: true,
                onFinish: function(data) {
                    var tY = parseInt($("#yearly-slider").val());
                    plotIncomeMap(incomeGrid, tY, standardizationVar);
                    plotInvestmentMap(investmentGrid, tY, standardizationVar);
                    plotMaintainenceMap(maintainenceGrid, tY, standardizationVar);
                }
            });
        }

        function generateInitTables() {
            var allDiagrams = syndiagrams.diagrams;
            var sys = systems;
            var syslen = sys.length;
            for (var x = 0; x < syslen; x++) {
                sys[x]['diagrams'] = [];
                // sysDiags.push({cursys.name:{"id":cursys.id, "color":cursys.syscolor, "diagrams":[]}});
            }
            var diagGJ = {};
            for (var g = 0; g < allDiagrams.length; g++) {
                var curDiag = allDiagrams[g];
                diagGJ[parseInt(curDiag)] = {
                    "type": "FeatureCollection",
                    "features": []
                };
            }
            for (var j = 0; j < design.features.length; j++) {
                var curFeat = design.features[j];
                var curFeatProp = curFeat.properties;
                var diagID = curFeatProp.diagramid;
                diagGJ[parseInt(diagID)].features.push(curFeat);
            }

            for (var dID in diagGJ) {
                var diagFeats = diagGJ[dID];
                var ran = false;
                for (var y1 = 0; y1 < diagFeats.features.length; y1++) {
                    if (ran == false) {
                        var diagSysName = diagFeats.features[y1].properties.sysname;
                        // var tmpDiagFeat = {};
                        for (var x1 = 0; x1 < syslen; x1++) {
                            var cursys = sys[x1];
                            if (cursys.sysname == diagSysName) {
                                // tmpDiagFeat[dID]  = diagFeats;
                                sys[x1]['diagrams'].push(diagFeats);
                                break;
                            }
                            ran = true;
                        }
                        break;
                    }
                }
            }
            // iterate over design features
            // console.log(diagGJ);
            // iterate over systems to build the table. 

            $("#investments").find("tbody>tr:gt(0)").remove();
            $("#investments").find("thead>tr:gt(0)").remove();

            $("#income").find("tbody>tr:gt(0)").remove();
            $("#income").find("thead>tr:gt(0)").remove();

            $("#maintainence").find("tbody>tr:gt(0)").remove();
            $("#maintainence").find("thead>tr:gt(0)").remove();

            $("#npv").find("tbody>tr:gt(0)").remove();
            $("#npv").find("thead>tr:gt(0)").remove();

            var headcounter = 0;
            var footercounter = 0;
            for (var h = 0; h < syslen; h++) {
                // iterate over system
                var cursys = sys[h];

                if (cursys.diagrams.length > 0) {
                    // create a new row
                    var yrCounter = 0
                    if (headcounter === 0) { // header row
                        var rowHTML = "<tr><th class='header initCol'></th>";
                        var rHTML = "<tr><th class='header initCol'></th>";
                        var mHTML = "<tr><th class='header initCol'></th>";
                        var npvHTML = "<tr><th class='header initCol'></th>";

                        for (var g = 0; g < numYears; g++) {
                            if (g < numYears - 2) {
                                rowHTML += "<th class='header'>" + (startyear + yrCounter) + "</th>";
                                rHTML += "<th class='header'>" + (startyear + yrCounter) + "</th>";
                                mHTML += "<th class='header'>" + (startyear + yrCounter) + "</th>";
                                npvHTML += "<th class='header'>" + (startyear + yrCounter) + "</th>";
                                yrCounter += 1;
                            } else {
                                if (g == (numYears - 1)) {
                                    rowHTML += "<th class='header'>Total</th>";
                                    // rHTML += "<th>Investment</th>";
                                    rHTML += "<th class='header'>Total</th>";
                                    mHTML += "<th class='header'>Total</th>";
                                    npvHTML += "<th class='header'>Total</th>";
                                } else {
                                    rowHTML += "<th class='header'>&nbsp;</th>";
                                    rHTML += "<th class='header'></th>";
                                    mHTML += "<th class='header'></th>";
                                    npvHTML += "<th class='header'>NPV</th>";
                                    // rHTML += "<th>Annual Income (3% growth)</th>";
                                }
                            }
                        }
                        rowHTML += "</tr>";
                        rHTML += "</tr>";
                        mHTML += "</tr>";
                        npvHTML += "</tr>";
                        $('#investments thead>tr:last').after(rowHTML);
                        $('#income thead>tr:last').after(rHTML);
                        $('#npv thead>tr:last').after(npvHTML);
                        $('#maintainence thead>tr:last').after(mHTML);
                        headcounter += 1;
                    } // header is added. 

                    // add system row 
                    var sysrowHTML = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol sysrow sysheader'>" + cursys.sysname + "</td>";
                    for (var g1 = 0; g1 < numYears; g1++) {
                        sysrowHTML += "<td class='sysrow'>&nbsp;</td>";
                    }
                    sysrowHTML += "</tr>";

                    $('#investments tbody>tr:last').after(sysrowHTML);
                    $('#income tbody>tr:last').after(sysrowHTML);
                    $('#npv tbody>tr:last').after(sysrowHTML);
                    $('#maintainence tbody>tr:last').after(sysrowHTML);
                    var diaglen = cursys.diagrams.length;

                    for (var p = 0; p < diaglen; p++) {
                        var curdiag = cursys.diagrams[p];
                        if (curdiag.features.length > 0) {
                            var curdiagprops = curdiag.features[0].properties;
                            var curdiagid = curdiag.features[0].properties.diagramid;
                            // var curdiagname = curdiag.
                            var diagrowHTMLinvest = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" + curdiagprops.description + "</td>";
                            yrCounter = 0
                            for (var g2 = 0; g2 < numYears; g2++) {
                                if (g2 < numYears - 2) {
                                    var cYear = (startyear + yrCounter);
                                    diagrowHTMLinvest += "<td id=" + "'" + curdiagid + "-" + cYear + "-invest" + "'" + ">" + "0.00m" + "</td>";
                                    yrCounter += 1;
                                } else {
                                    if (g2 == (numYears - 1)) {
                                        diagrowHTMLinvest += "<td id=" + "'" + curdiagid + "-all-invest" + "'" + ">" + "0.00m" + "</td>";
                                    } else if (g2 == (numYears - 2)) {
                                        diagrowHTMLinvest += "<td>" + "" + "</td>";
                                    }
                                }
                            }
                            diagrowHTMLinvest += "</tr>";
                            $('#investments tbody>tr:last').after(diagrowHTMLinvest);

                            var diagrowHTMLincome = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" + curdiagprops.description + "</td>";
                            yrCounter = 0
                            for (var g3 = 0; g3 < numYears; g3++) {
                                if (g3 < numYears - 2) {
                                    var cYear = (startyear + yrCounter);
                                    diagrowHTMLincome += "<td id=" + "'" + curdiagid + "-" + cYear + "-income" + "'" + ">" + "0.00m" + "</td>";
                                    yrCounter += 1;
                                } else {
                                    if (g3 == (numYears - 1)) {
                                        diagrowHTMLincome += "<td id=" + "'" + curdiagid + "-total-income" + "'" + ">" + "0.00m" + "</td>";
                                    } else if (g3 == (numYears - 2)) {
                                        // diagrowHTMLincome += "<td id=" + "'" + curdiagid +"-annual-income"+"'" + ">" + "0.00m" + "</td>";
                                        diagrowHTMLincome += "<td>" + "" + "</td>";
                                    }
                                }
                            }
                            diagrowHTMLincome += "</tr>";
                            $('#income tbody>tr:last').after(diagrowHTMLincome);
                            var diagrowHTMLnpv = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" + curdiagprops.description + "</td>";
                            yrCounter = 0;
                            for (var g4 = 0; g4 < numYears; g4++) {
                                if (g4 < (numYears - 2)) {
                                    var cYear = (startyear + yrCounter);
                                    diagrowHTMLnpv += "<td id=" + "'" + curdiagid + "-" + cYear + "-dcf" + "'" + ">" + "0.00m" + "</td>";
                                    yrCounter += 1;
                                } else {
                                    if (g4 == (numYears - 1)) {
                                        diagrowHTMLnpv += "<td id=" + "'" + curdiagid + "-total-dcf" + "'" + ">" + "0.00m" + "</td>";
                                    } else if (g4 == (numYears - 2)) {
                                        // diagrowHTMLincome += "<td id=" + "'" + curdiagid +"-annual-income"+"'" + ">" + "0.00m" + "</td>";
                                        diagrowHTMLnpv += "<td class='npvcont' id=" + "'" + curdiagid + "-total-npv" + "'" + ">" + "0.00m" + "</td>";
                                    }
                                }
                            }
                            diagrowHTMLnpv += "</tr>";
                            $('#npv tbody>tr:last').after(diagrowHTMLnpv);

                            var diagrowHTMLmaint = "<tr class=" + "'" + cursys.id + "'" + "><td class='initCol'>" + curdiagprops.description + "</td>";
                            yrCounter = 0;
                            for (var g5 = 0; g5 < numYears; g5++) {
                                if (g5 < (numYears - 2)) {
                                    var cYear = (startyear + yrCounter);
                                    diagrowHTMLmaint += "<td id=" + "'" + curdiagid + "-" + cYear + "-maint" + "'" + ">" + "0.00m" + "</td>";
                                    yrCounter += 1;
                                } else {
                                    if (g5 == (numYears - 1)) {
                                        diagrowHTMLmaint += "<td id=" + "'" + curdiagid + "-total-maint" + "'" + ">" + "0.00m" + "</td>";
                                    } else if (g5 == (numYears - 2)) {
                                        // diagrowHTMLincome += "<td id=" + "'" + curdiagid +"-annual-income"+"'" + ">" + "0.00m" + "</td>";
                                        diagrowHTMLmaint += "<td>" + "" + "</td>";
                                    }
                                }
                            }
                            diagrowHTMLmaint += "</tr>";
                            $('#maintainence tbody>tr:last').after(diagrowHTMLmaint);

                        }
                    }


                    if (h === (syslen - 1)) { // footer row
                        var rowHTML = "<tr class='footer'><td class='footertotal initCol'>Total</td>";
                        var rHTML = "<tr class='footer'><td class='footertotal initCol'>Total</td>";
                        var maintHTML = "<tr class='footer'><td class='footertotal initCol'>Total</td>";
                        var npvHTML = "<tr class='footer'><td class='footertotal initCol'>Total</td>";
                        yrCounter = 0;
                        for (var g5 = 0; g5 < numYears; g5++) {
                            if (g5 < numYears - 2) {
                                var cYear = (startyear + yrCounter);
                                rowHTML += "<td class='footertotal' id=" + "'" + cYear + "-total-investment" + "'" + ">0.00m</td>";
                                rHTML += "<td class='footertotal' id=" + "'" + cYear + "-total-income" + "'" + ">0.00m</td>";
                                maintHTML += "<td class='footertotal' id=" + "'" + cYear + "-total-maint" + "'" + ">0.00m</td>";
                                // npvHTML += "<td class='footertotal' id=" + "'" + cYear +"-total-npv"+"'" + ">0.00m</td>";
                                yrCounter += 1;
                            }
                        }
                        rowHTML += "</tr>";
                        rHTML += "</tr>";
                        maintHTML += "</tr>";
                        npvHTML += "</tr>";
                        $('#investments tbody>tr:last').after(rowHTML);
                        $('#income tbody>tr:last').after(rHTML);
                        $('#maintainence tbody>tr:last').after(maintHTML);
                        // $('#npv tbody>tr:last').after(npvHTML);
                        // footercounter +=1;
                    } // header is added. 
                }
            }
            systems = sys;
        }

        function updateWorkerStatus(data) {
            console.log(data);
        }

        function populateTableDataInit() {
            var areaWorker = new Worker('/assets/workers/computeAreas.js');
            areaWorker.onerror = function(e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in processing, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };
            // console.log(selectedsystems);
            areaWorker.postMessage({
                'systemdetails': JSON.stringify(systemdetail),
                'systems': JSON.stringify(systems),
                'timeline': JSON.stringify(timeline),
                'startyear': JSON.stringify(startyear),
                'bounds': bounds['bounds']
            });
            areaWorker.addEventListener('message', function(e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    var raworpp = $('input:radio[name="pprintdisplay"]:checked').val();
                    var pprint = (raworpp == 'raw') ? 0 : 1;
                    standardizationVar = parseInt(e.data.maxYearlyCost);
                    grid = JSON.parse(e.data.grid);
                    sysGrids = JSON.parse(e.data.sysGrids);
                    diagGrids = JSON.parse(e.data.diagGrids);
                    populateMaps(e.data.grid, e.data.sysGrids, e.data.diagGrids, e.data.output, 'all', 'all', parseInt(e.data.maxYearlyCost));
                    investmentdata = JSON.parse(e.data.output);
                    showallTables();
                    populateIncomeInvestment(investmentdata, pprint);
                    computeDCFNPV(investmentdata, pprint);
                    generateSystemCB(systemdetail);
                    $('#systemsCBCont').show();
                }
            }, false);

        }

        function populateMaps(grid, sysGridIDs, diagGridIDs, idata, selectedsystems, totalorYearly, stdVar) {
            var mapWorker = new Worker('/assets/workers/computeMap.js');
            mapWorker.onerror = function(e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in creating maps, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };

            // console.log(selectedsystems);
            mapWorker.postMessage({
                'grid': grid,
                'sysGrid': sysGridIDs,
                'diagGrid': diagGridIDs,
                'investmentdata': idata,
                'selectedsystems': 'all'
            });
            mapWorker.addEventListener('message', function(e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    // console.log(e.data.incomeGrid);
                    incomeGrid = JSON.parse(e.data.incomeGrid);
                    investmentGrid = JSON.parse(e.data.investmentGrid);
                    maintainenceGrid = JSON.parse(e.data.maintainenceGrid);
                    plotIncomeMap(incomeGrid, totalorYearly, stdVar);
                    plotInvestmentMap(investmentGrid, totalorYearly, stdVar);
                    plotMaintainenceMap(maintainenceGrid, totalorYearly, stdVar);
                    // paint on map.
                }
            }, false);

            $("#loadingGIF").hide();
        }

        function updateMaps() {
            var selectedsystems = [];
            
                
                $('#systemsCB input:checked').each(function() {
                    selectedsystems.push($(this).attr('id'));
                });
           

            var mapWorker = new Worker('/assets/workers/computeMap.js');
            mapWorker.onerror = function(e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                $("#loadingGIF").hide();
                humane.log("There was a error in creating maps, please try again.. ", {
                    addnCls: 'humane-flatty-log'
                });

            };

            // console.log(selectedsystems);
            mapWorker.postMessage({
                'grid': JSON.stringify(grid),
                'sysGrid': JSON.stringify(sysGrids),
                'diagGrid': JSON.stringify(diagGrids),
                'investmentdata': JSON.stringify(investmentdata),
                'selectedsystems': JSON.stringify(selectedsystems)
            });
            mapWorker.addEventListener('message', function(e) {
                if (e.data.mode === 'status') {
                    updateWorkerStatus(e.data.percentcomplete);
                } else {
                    // console.log(e.data.incomeGrid);
                    var incg = JSON.parse(e.data.incomeGrid);
                    var invg = JSON.parse(e.data.investmentGrid);
                    var maintg = JSON.parse(e.data.maintainenceGrid);
                    plotIncomeMap(incg, 'all', standardizationVar);
                    plotInvestmentMap(invg, 'all', standardizationVar);
                    plotMaintainenceMap(maintg, 'all', standardizationVar);
                    // paint on map.
                }
            }, false);

            $("#loadingGIF").hide();
        }
        var incomemap = L.map('incomeMap', {
            'zoomControl': false,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false
        });
        var incomeBaseLayer = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(incomemap);
        var incomeLayer = L.featureGroup().addTo(incomemap);


        var investmentmap = L.map('investmentMap', {
            'zoomControl': false,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false
        });
        var incomeBaseLayer = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(investmentmap);
        var investmentLayer = L.featureGroup().addTo(investmentmap);



        var maintainencemap = L.map('maintainenceMap', {
            'zoomControl': false,
            'dragging': false,
            'touchZoom': false,
            'scrollWheelZoom': false,
            'doubleClickZoom': false
        });
        var maintainenceBaseLayer = L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://cartodb.com/attributions">CartoDB</a>',
            maxZoom: 18,
        }).addTo(maintainencemap);
        var maintainenceLayer = L.featureGroup().addTo(maintainencemap);


        var bnds = bounds['bounds'];
        var latLngs = bnds.split(',');
        var southWest = L.latLng(latLngs[1], latLngs[0]);
        var northEast = L.latLng(latLngs[3], latLngs[2]);
        var mB = new L.latLngBounds(southWest, northEast);

        incomemap.fitBounds(mB);
        investmentmap.fitBounds(mB);
        maintainencemap.fitBounds(mB);

        function plotIncomeMap(incomeGrid, yearlyOrTotal, stdVar) {

            incomeLayer.clearLayers();
            if (yearlyOrTotal === 'all') {

                L.choropleth(incomeGrid, {
                    valueProperty: function(feature) {
                        var m = feature.properties.totalIncome;
                        m = (m / stdVar) * 100;
                        
                        return m;                
                        },
                    
                    scale: ['#edf8e9', '#bae4b3', '#74c476', '#31a354', '#006d2c'], //greens
                    // scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'q',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: function(feature, layer) {
                        // layer.bindPopup('District ' + feature.properties.id + '<br>' +
                        //     feature.properties.totalIncome.toLocaleString() + ' incidents');
                        var ps = abbrNum(feature.properties.totalIncome,2);
                        layer.bindPopup(ps);
                    }
                }).addTo(incomeLayer);
            } else {
                L.choropleth(incomeGrid, {
                    valueProperty: function(feature) {
                        var i = (feature.properties.income[parseInt(yearlyOrTotal)]) ? feature.properties.income[parseInt(yearlyOrTotal)] : 0;
                        i = (i / stdVar) * 100;
                        // console.log("income: " + i);
                        return i
                    },
                    scale: ['#edf8e9', '#bae4b3', '#74c476', '#31a354', '#006d2c'], //greens
                    // scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'q',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: function(feature, layer) {
                        // layer.bindPopup('District ' + feature.properties.id + '<br>' +
                        //     feature.properties.totalIncome.toLocaleString() + ' incidents');
                        var ps = (feature.properties.income[parseInt(yearlyOrTotal)]) ? feature.properties.income[parseInt(yearlyOrTotal)] : 0;
                        ps = abbrNum(ps, 2);
                        layer.bindPopup(ps);
                    }
                }).addTo(incomeLayer);

            }


        }

        function plotInvestmentMap(investmentGrid, yearlyOrTotal, stdVar) {
            investmentLayer.clearLayers();

            // var plotValue = (yearlyOrTotal === 'all') ? 'totalInvestment': yearlyOrTotal;
            if (yearlyOrTotal === 'all') {

                L.choropleth(investmentGrid, {
                    valueProperty:function(feature) {
                        var i = feature.properties.totalInvestment;
                        i = (i / stdVar) * 100;
                        // console.log("investment: " + i);
                        return i
                    }, 
                    scale: ['#fef0d9', '#fdcc8a', '#fc8d59', '#e34a33', '#b30000'], // reds
                    // scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'q',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: function(feature, layer) {
                        // layer.bindPopup('District ' + feature.properties.id + '<br>' +
                        //     feature.properties.totalInvestment.toLocaleString() + ' incidents');
                        var ps = abbrNum(feature.properties.totalInvestment, 2);

                        layer.bindPopup(ps);

                    }
                }).addTo(investmentLayer);
            } else {

                L.choropleth(investmentGrid, {
                    valueProperty: function(feature) {
                        var i = (feature.properties.investment[parseInt(yearlyOrTotal)]) ? feature.properties.investment[parseInt(yearlyOrTotal)] : 0;
                        i = (i / stdVar) * 100;
                        // console.log("investment: " + i);
                        return i
                    },
                    scale: ['#fef0d9', '#fdcc8a', '#fc8d59', '#e34a33', '#b30000'], // reds
                    // scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'e',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: function(feature, layer) {
                        // layer.bindPopup('District ' + feature.properties.id + '<br>' +
                        //     feature.properties.totalInvestment.toLocaleString() + ' incidents');
                        var ps = (feature.properties.investment[parseInt(yearlyOrTotal)]) ? feature.properties.investment[parseInt(yearlyOrTotal)].toLocaleString() : 0;
                        ps = abbrNum(p2,2);

                        layer.bindPopup(ps);

                    }
                }).addTo(investmentLayer);
            }
        }

        function plotMaintainenceMap(maintainenceGrid, yearlyOrTotal, stdVar) {
            maintainenceLayer.clearLayers();
            var plotValue = (yearlyOrTotal === 'all') ? 'totalMaintainence' : yearlyOrTotal;
            if (yearlyOrTotal === 'all') {

                L.choropleth(maintainenceGrid, {
                    valueProperty: function(feature) {
                        var m = feature.properties.totalMaintainence;
                        m = (m / stdVar) * 100;
                        
                        return (-1 * m)
                    },
                    scale: ['#eff3ff', '#bdd7e7', '#6baed6', '#3182bd', '#08519c'],
                    // scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'q',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: function(feature, layer) {
                        // layer.bindPopup('District ' + feature.properties.id + '<br>' +
                        //     feature.properties.totalMaintainence.toLocaleString() + ' incidents');
                        var ps = feature.properties.totalMaintainence;
                        // console.log(ps);
                        ps = Math.abs(ps);
                        ps = abbrNum(ps, 2);

                        layer.bindPopup("-"+ ps);

                    }
                }).addTo(maintainenceLayer);
            } else {
                L.choropleth(maintainenceGrid, {
                    valueProperty: function(feature) {
                        var m = (feature.properties.maintainence[parseInt(yearlyOrTotal)]) ? feature.properties.maintainence[parseInt(yearlyOrTotal)] : 0;
                        m = (m / stdVar) * 100;
                        // console.log("maintainence: " + m);
                        return (-1 * m)
                    },
                    scale: ['#eff3ff', '#bdd7e7', '#6baed6', '#3182bd', '#08519c'],
                    // scale: ['#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f'], //purples
                    steps: 5,
                    mode: 'e',
                    style: {
                        color: '#fff',
                        weight: 2,
                        fillOpacity: 0.8
                    },
                    onEachFeature: function(feature, layer) {
                        // layer.bindPopup('District ' + feature.properties.id + '<br>' +
                        //     feature.properties.totalMaintainence.toLocaleString() + ' incidents');
                        var ps = (feature.properties.maintainence[parseInt(yearlyOrTotal)]) ? feature.properties.maintainence[parseInt(yearlyOrTotal)].toLocaleString() : 0;
                        // console.log(ps);
                        ps = Math.abs(ps);
                        ps = abbrNum(ps,2);
                        layer.bindPopup("-" + ps);

                    }
                }).addTo(maintainenceLayer);

            }
        }

        function populateIncomeInvestment(investmentdata, pprint) {
            for (var g = 0; g < investmentdata.length; g++) {
                var curInvestmentdata = investmentdata[g];
                var diagID = curInvestmentdata['id'];
                var totalInvestment = curInvestmentdata['totalInvestment'];
                var tInvest;
                if (pprint) {
                    tInvest = abbrNum(totalInvestment, 1);
                } else {
                    tInvest = parseFloat(totalInvestment).toFixed(2);
                }
                $("#" + diagID + "-all-invest").html(tInvest);
                // var annualIncome = abbrNum(curInvestmentdata['income']['yearly'],1);
                var totalIncome;
                if (pprint) {
                    totalIncome = abbrNum(curInvestmentdata['income']['total'], 1);
                } else {
                    totalIncome = parseFloat(curInvestmentdata['income']['total']).toFixed(2);
                }
                // $("#"+ diagID+ "-"+"annual-income").html(annualIncome);
                $("#" + diagID + "-" + "total-income").html(totalIncome);

                var totalMaint = curInvestmentdata['maintainence']['total'];
                if (pprint) {
                    var abstotalMaint = Math.abs(totalMaint);
                    // totalMaint = '(' + abbrNum(abstotalMaint, 1) + ')';
                    totalMaint = abbrNum(abstotalMaint, 1);
                } else {
                    totalMaint = parseFloat(totalMaint).toFixed(2);
                }
                // $("#"+ diagID+ "-"+"annual-income").html(annualIncome);
                $("#" + diagID + "-" + "total-maint").html(totalMaint);

                for (var t1 = 0; t1 < numYears; t1++) {
                    var currentYear = (startyear + t1);
                    var cInvest = curInvestmentdata['investment'];
                    var cIncome = curInvestmentdata['income'];
                    var cMaint = curInvestmentdata['maintainence'];
                    var totalIncome = curInvestmentdata['income']['total'];
                    if (currentYear in cInvest) {
                        var yearlyInvest = 0;
                        if (pprint) {
                            yearlyInvest = abbrNum(cInvest[currentYear], 1);
                        } else {
                            yearlyInvest = parseFloat(cInvest[currentYear]).toFixed(2);
                        }
                        $("#" + diagID + "-" + currentYear + "-invest").html(yearlyInvest);
                    }
                    var yearlyIncome = 0;
                    if (pprint) {
                        yearlyIncome = abbrNum(cIncome[currentYear], 1);
                    } else {
                        yearlyIncome = parseFloat(cIncome[currentYear]).toFixed(2);
                    }
                    $("#" + diagID + "-" + currentYear + "-income").html(yearlyIncome);
                    // var totalIncome = 
                    // $("#"+ diagID+ "-"+"growth").html(0.03);

                    var yearlyMaintainence = 0;
                    var absMaint = Math.abs(cMaint[currentYear]);
                    if (pprint) {
                        // yearlyMaintainence = '(' + abbrNum(absMaint, 1) + ')';
                        yearlyMaintainence = abbrNum(absMaint, 1);
                    } else {
                        yearlyMaintainence = parseFloat(cMaint[currentYear]).toFixed(2);
                    }
                    $("#" + diagID + "-" + currentYear + "-maint").html(yearlyMaintainence);

                }
            }
        }

        function computeDCFNPV(investmentdata, pprint) {

            var wacc = (parseFloat($("#wacc-slider").val()) / 100);

            var yearlyIncomeTotal = {};
            var yearlyInvestmentTotal = {};
            var yearlyDCFTotal = {};
            var yearlyMaintainenceTotal = {};

            for (var t2 = 0; t2 < numYears; t2++) {
                var currentYear = (startyear + t2);
                yearlyIncomeTotal[currentYear] = 0;
                yearlyInvestmentTotal[currentYear] = 0;
                yearlyDCFTotal[currentYear] = 0;
                yearlyMaintainenceTotal[currentYear] = 0;
            }

            for (var t2 = 0; t2 < investmentdata.length; t2++) {
                var curSys = investmentdata[t2];
                var income = curSys['income'];
                var investment = curSys['investment'];
                var maintainence = curSys['maintainence'];

                var netIncome = [];
                for (var g = 0; g < numYears; g++) {
                    var cYear = (startyear + g);
                    var yearInvestment;
                    var yearIncome;
                    var yearMaintainence;
                    try {
                        yearInvestment = (investment[cYear]) ? (investment[cYear]) : 0;
                    } catch (err) {
                        yearInvestment = 0;
                    }
                    try {
                        yearIncome = (income[cYear]) ? (income[cYear]) : 0;
                    } catch (err) {
                        yearIncome = 0;
                    }
                    try {
                        yearMaintainence = (maintainence[cYear]) ? (maintainence[cYear]) : 0;
                    } catch (err) {
                        yearMaintainence = 0;
                    }
                    yearlyIncomeTotal[cYear] += yearIncome;
                    yearlyInvestmentTotal[cYear] += yearInvestment;
                    yearlyMaintainenceTotal[cYear] += yearMaintainence;

                    netIncome.push((yearIncome - yearInvestment - yearMaintainence));
                }

                var dcf = [];
                for (var g1 = 0; g1 < numYears; g1++) {
                    var cYear = (startyear + g1);
                    var curdcf = ((netIncome[g1]) / Math.pow((1 + wacc), g1));
                    dcf.push(parseInt(curdcf));
                    var abscurDCF = Math.abs(curdcf);
                    if (curdcf < 0) {
                        if (pprint) {
                            $("#" + curSys['id'] + "-" + cYear + "-dcf").html('(' + abbrNum(abscurDCF, 1) + ')');
                        } else {
                            $("#" + curSys['id'] + "-" + cYear + "-dcf").html(parseFloat(curdcf).toFixed(2));
                        }
                    } else {
                        if (pprint) {
                            $("#" + curSys['id'] + "-" + cYear + "-dcf").html(abbrNum(abscurDCF, 1));
                        } else {

                            $("#" + curSys['id'] + "-" + cYear + "-dcf").html(parseFloat(curdcf).toFixed(2));
                        }
                    }
                    var yearlyIncome = yearlyIncomeTotal[cYear];
                    var yearlyInvestment = yearlyInvestmentTotal[cYear];
                    var yearlyMaintainence = yearlyMaintainenceTotal[cYear];

                    var absyearlyIncome = Math.abs(yearIncome);
                    var absyearlyInvestment = Math.abs(yearlyInvestment);
                    var absyearlyMaintainence = Math.abs(yearlyMaintainence);

                    if (yearlyIncome < 0) {
                        if (pprint) {
                            $("#" + +cYear + "-total-income").html('(' + abbrNum(yearlyIncome, 1) + ')');
                        } else {
                            $("#" + +cYear + "-total-income").html(parseFloat(yearlyIncome).toFixed(2));
                        }
                    } else {
                        if (pprint) {
                            $("#" + +cYear + "-total-income").html(abbrNum(yearlyIncome, 1));
                        } else {
                            $("#" + +cYear + "-total-income").html(parseFloat(yearlyIncome).toFixed(2));
                        }
                    }
                    if (yearlyMaintainence < 0) {
                        var absyrlyMaintainence = Math.abs(yearlyMaintainence);
                        if (pprint) {
                            $("#" + +cYear + "-total-maint").html('(' + abbrNum(absyrlyMaintainence, 1) + ')');
                        } else {
                            $("#" + +cYear + "-total-maint").html(parseFloat(yearlyMaintainence).toFixed(2));
                        }
                    }
                    if (yearlyInvestment < 0) {
                        if (pprint) {
                            $("#" + +cYear + "-total-investment").html('(' + abbrNum(yearlyInvestment, 1) + ')');
                        } else {
                            $("#" + +cYear + "-total-investment").html(parseFloat(yearlyInvestment).toFixed(2));
                        }
                    } else {
                        if (pprint) {
                            $("#" + +cYear + "-total-investment").html(abbrNum(yearlyInvestment, 1));
                        } else {
                            $("#" + +cYear + "-total-investment").html(parseFloat(yearlyInvestment).toFixed(2));
                        }
                    }
                }

                var totaldcf = dcf.reduce(function(a, b) {
                    return a + b;
                }, 0);
                var abstotaldcf = Math.abs(totaldcf);
                if (totaldcf < 0) {
                    if (pprint) {
                        $("#" + curSys['id'] + "-total-dcf").html('(' + abbrNum(abstotaldcf, 1) + ')');
                    } else {
                        $("#" + curSys['id'] + "-total-dcf").html(parseFloat(totaldcf).toFixed(2));
                    }
                } else {
                    if (pprint) {
                        $("#" + curSys['id'] + "-total-dcf").html(abbrNum(abstotaldcf, 1));
                    } else {
                        $("#" + curSys['id'] + "-total-dcf").html(parseFloat(totaldcf).toFixed(2));
                    }
                }
                var npv = curSys['totalInvestment'] - totaldcf;
                var absnpv = Math.abs(npv);

                if (npv < 0) {
                    if (pprint) {
                        $("#" + curSys['id'] + "-total-npv").html('(' + abbrNum(absnpv, 1) + ')');
                    } else {
                        $("#" + curSys['id'] + "-total-npv").html(parseFloat(npv).toFixed(2));
                    }
                } else {
                    if (pprint) {
                        $("#" + curSys['id'] + "-total-npv").html(abbrNum(absnpv, 1));
                    } else {
                        $("#" + curSys['id'] + "-total-npv").html(parseFloat(npv).toFixed(2));
                    }
                }
            }

        }
        $('input:radio[name="pprintdisplay"]').change(function(event) {
            populateTableDataInit();
        });


        $('input:radio[name="mapdisplay"]').change(function(event) {

            var checked = $('input:radio[name="mapdisplay"]:checked').val();
            if (checked == 'total') {
                $("#yearlySliderCont").hide();
                plotIncomeMap(incomeGrid, 'all', standardizationVar);
                plotMaintainenceMap(maintainenceGrid, 'all', standardizationVar);
                plotInvestmentMap(investmentGrid, 'all', standardizationVar);
            } else {
                $("#yearlySliderCont").show();

            }
        });

        function generateSystemCB(systems) {
            $("#systemsCB").html('');
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<input name="sysCB" id=' + "'" + systems[x].id + "'" + 'type="checkbox" checked /> <span class="square c-' + systems[x].syscolor.substring(1) + '"></span>&nbsp;&nbsp;' + systems[x].sysname + '</input>&nbsp;&nbsp;');
            }

            $('#systemsCB').click(function() {
                var selectedsystems = [];
                $('#systemsCB input:checked').each(function() {
                    selectedsystems.push($(this).attr('id'));
                });
                // switch yearly
                // TODO: click on the yearly switch

                // TODO: update maps for system. 
                updateMaps();
                // hide rest from map, 
                $('#investments > tbody > tr').each(function() {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });
                // hide rest from map, 
                $('#income > tbody > tr').each(function() {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });
                // hide rest from map, 
                $('#npv > tbody > tr').each(function() {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });
                // hide rest from map, 
                $('#maintainence > tbody > tr').each(function() {
                    var cls = $(this).attr('class');
                    var classWhitelist = ['blank'];
                    if (jQuery.inArray(cls, classWhitelist) == -1) { // it is not in whitelist
                        if (jQuery.inArray(cls, selectedsystems) == -1) { // this class is not in whilte list
                            // hide it.
                            $(this).hide();
                        } else {
                            // show it.
                            $(this).show();
                        }
                    }
                });

                // hide
            });
        }
        initpercentSliders();
        generateInitTables();
        populateTableDataInit();
        // computeDCFNPV();
        function showallTables() {
            // hide rest from map, 
            $('#investments > tbody > tr').each(function() {
                $(this).show();
            });
            // hide rest from map, 
            $('#income > tbody > tr').each(function() {
                $(this).show();
            });
            // hide rest from map, 
            $('#npv > tbody > tr').each(function() {
                $(this).show();
            });
            $('#maintainence > tbody > tr').each(function() {
                $(this).show();
            });
        }
    </script>
</body>

</html>